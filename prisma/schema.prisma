// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          String    @default("PATIENT")
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // GDPR Compliance
  privacyAccepted     Boolean   @default(false)
  privacyAcceptedAt   DateTime?
  marketingConsent    Boolean   @default(false)
  dataProcessingConsent Boolean @default(false)
  lastLogin           DateTime?
  ipAddress           String?   // Per audit log

  // Consensi Sanitari (obbligatori per centri medici)
  medicalConsentAccepted Boolean @default(false)  // Consenso al trattamento dati sanitari (Art. 9 GDPR)
  medicalConsentAt       DateTime?                 // Data consenso sanitario
  informedConsentAccepted Boolean @default(false)  // Consenso informato alla prestazione
  informedConsentAt      DateTime?                 // Data consenso informato
  termsAccepted          Boolean @default(false)   // Termini e condizioni
  termsAcceptedAt        DateTime?                 // Data accettazione T&C

  // Dati aggiuntivi per audit medico-legale
  fiscalCode             String?                   // Codice fiscale (obbligatorio per fatturazione)
  birthDate              DateTime?                 // Data di nascita
  consentSignature       String?                   // Firma digitale consenso (timestamp hash)

  // Dati anagrafici completi (da modulo privacy)
  luogoNascita           String?
  professione            String?
  indirizzo              String?
  citta                  String?
  cap                    String?
  numeroDocumento        String?
  scadenzaDocumento      DateTime?
  emailComunicazioni     String?

  // Google OAuth2 tokens (per staff members)
  googleAccessToken      String?                   // Token di accesso Google
  googleRefreshToken     String?                   // Token di refresh Google
  googleTokenExpiry      DateTime?                 // Scadenza del token di accesso

  // Relations
  bookingsAsPatient   Booking[]  @relation("PatientBookings")
  bookingsAsStaff     Booking[]  @relation("StaffBookings")
  services            Service[]  @relation("StaffServices")
  auditLogs           AuditLog[]

  @@map("users")
}

model Service {
  id              String    @id @default(cuid())
  name            String
  description     String?
  durationMinutes Int       // Durata in minuti
  price           Float     // Prezzo in euro
  notes           String?   // Note per il paziente
  active          Boolean   @default(true)
  color           String    @default("#3b82f6") // Colore per il calendario
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  category        String?

  // Relations
  staffMembers    User[]    @relation("StaffServices")
  bookings        Booking[]

  @@map("services")
}

model Booking {
  id                String        @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  status            String        @default("PENDING") // Potrebbe diventare BookingStatus (PENDING, CONFIRMED, CANCELLED)
  notes             String?       // Note del paziente
  googleEventId     String?       // ID dell'evento su Google Calendar
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Campi per pagamento e fatturazione
  paymentStatus     String @default("PENDING") // Valori possibili: PENDING, PAID, FAILED
  stripeSessionId   String?       @unique
  fatturaId         String?       // ID della fattura o ricevuta da Fatture in Cloud
  partnerData       String?       // Dati del partner in formato JSON (serializzato come stringa)

  // Campi per archiviazione temporanea documenti
  documentoFrente        String?
  documentoRetro         String?
  documentoFrentePartner String?
  documentoRetroPartner  String?

  // Foreign Keys
  patientId         String
  staffId           String
  serviceId         String

  // Relations
  patient           User          @relation("PatientBookings", fields: [patientId], references: [id], onDelete: Cascade)
  staff             User          @relation("StaffBookings", fields: [staffId], references: [id], onDelete: Cascade)
  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([staffId])
  @@index([serviceId])
  @@index([startTime])
  @@map("bookings")
}

model Settings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  updatedAt         DateTime @updatedAt

  @@map("settings")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // LOGIN, CREATE, UPDATE, DELETE, EXPORT, ACCESS
  entity      String?  // User, Booking, Service, etc.
  entityId    String?
  ipAddress   String?
  userAgent   String?
  metadata    String?  // JSON con dettagli aggiuntivi
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}
